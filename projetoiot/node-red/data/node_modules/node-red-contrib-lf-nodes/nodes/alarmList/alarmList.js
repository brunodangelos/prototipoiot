module.exports = function(RED) {
  var fetch = require('node-fetch')

  function alarmList(config) {
    RED.nodes.createNode(this, config)
    var context = this.context().global
    this.ID = config.ID
    this.URL = config.URL
    this.startDate = config.startDate
    this.endDate =  config.endDate
    var node = this
    this.on('input', function(msg) {
      const dataInput = msg.payload.alarms
      // var token = context.get('token')
      var defaultURL = 'https://lf.aexol.com/graphql' // 'http://localhost:8080/graphql'
      if (typeof msg.payload === "number") {
        const query = `query {
          alarms(range: {startDate: "${node.startDate}", endDate: "${node.endDate}"}) {
            Sensor,
            Status,
            Device,
            Branch,
            Value,
            createdAt,
            ID
          }
        }`
        fetch(node.URL || defaultURL, {
          method: 'POST',
          mode: 'cors',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            query: query
          })
        })
        .then(resp => resp.json())
        .then(resp2 => {
          const alarmsList = resp2.data.alarms
          msg.payload = {
            [node.ID]: {
              data: alarmsList
            }
          }
          node.send(msg)
        })
        .catch(err => node.log(err))
      }
      if (dataInput) {
        msg.payload = {
          [node.ID]: {
            data: dataInput
          }
        }
        node.send(msg)
      } else {
        const dataPayload = JSON.parse(msg.payload)
        if (Object.keys(dataPayload)[0] && Object.keys(dataPayload)[0] == node.ID){
          let status = Object.values(dataPayload[node.ID]['Status'])
          const mutation = `mutation {
            alarmAction (action: {
              Status: [${status}],
              ID: "${dataPayload[node.ID]['ID']}",
              note: "${dataPayload[node.ID]['note']}"
            }),
            {
              status
            }
          }`

          const query = `query {
            alarms(range: {startDate: "${node.startDate}", endDate: "${node.endDate}"}) {
              Sensor,
              Status,
              Device,
              Branch,
              Value,
              createdAt,
              ID
            }
          }`
          
          fetch(node.URL || defaultURL, {
            method: 'POST',
            mode: 'cors',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              query: mutation
            })
          }).then(resp => resp.json())
          .then(r => {
            fetch(node.URL || defaultURL, {
              method: 'POST',
              mode: 'cors',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                query: query
              })
            })
            .then(resp => resp.json())
            .then(resp2 => {
              const alarmsList = resp2.data.alarms
              msg.payload = {
                [node.ID]: {
                  data: alarmsList
                }
              }
              node.send(msg)
            })
            })
          .catch(err => node.log(err))
        }
      }
    })
  }
  RED.nodes.registerType("alarmList", alarmList)
}